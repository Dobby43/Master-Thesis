{
    "name": "Slicing and Printing Configuration",
    "version": 1,
    "type": "configuration",
    "author": "David Scheidt",
    "settings": {
        "Directory": {
            "description": "Defines the input and output directories and filenames for the slicing and printing process.",
            "input_directory": {
                "description": "Base directory for input STL files",
                "value": "C:\\Users\\daves\\OneDrive\\Bauingenieurwesen\\Masterarbeit\\Dateien_Beispiele\\STL",
                "type": "str"
            },
            "input_name": {
                "description": "Name of the input STL file (without data type)",
                "value": "Retraction_Test",
                "type": "str"
            },
            "output_directory": {
                "description": "Base directory for storing output files",
                "value": "C:\\Users\\daves\\OneDrive\\Bauingenieurwesen\\Masterarbeit\\Slicing_Data\\V1.6",
                "type": "str"
            },
            "output_name": {
                "description": "Name of the output folder and files as well as .src top line",
                "value": "Retraction_Test",
                "type": "str"
            }
        },
        "Robot": {
            "description": "Settings specific to the robot, including dimensions, tool orientation, and motion parameters. If new categories ar defined inside this .json file, with [category_name][value], they can be referenced in [Robot][start_code] or [Robot][end_code] with {category_name}; only names with letters and numbers seperated by '_' are valid",
            "id": {
                "description": "name of robot",
                "value": "KUKA KR340 R3330",
                "type": "str"
            },
            "geometry": {
                "describtion": "measurement of robot arm & offset in accordance with to https://de.mathworks.com/matlabcentral/fileexchange/48468-inverse-kinematics-of-serial-robots-with-wrist?s%5C_tid=prof%5C_contriblnk",
                "value": {"a1": 500, "a2": 55, "b": 0, "c1": 1045, "c2": 1300, "c3": 1525, "c4": 290},
                "type": "dict[str,float]"
            },
            "base_coordinates": {
                "description": "Base coordinate frame ($ROBOTROOT) in the robot's workspace relative to $BASE (coordinate system of printbed); Delta given from $BASE to $ROBOTROOT; This leads to T($BASE,$ROBOTROOT) due to order of rotation being ZYX; example: '{\"X\": 1460.9, \"Y\": -2237.66, \"Z\": 268.5, \"A\": 0.0, \"B\": 0.0, \"C\": 0.0}'",
                "value": {"X": -1460.9, "Y": 2237.66, "Z": -268.5, "A": 0, "B": 0.0, "C": 0.0},
                "type": "dict[str,float]"
            },
            "tool_offset": {
                "description": "Tool offset from $NULLFRAME (flange of robot hand) in direction of $NULLFRAME; This leads to T($NULLFRAME,$TCP) as no rotation is involved",
                "value": {"X": -10.99, "Y": -0.86, "Z": 917.61},
                "type": "dict[str,float]"
            },
            "tool_orientation": {
                "description": "Tool orientation relative to $BASE/$FRAME (coordinate system of printbed); This leads to R($BASE/$FRAME,$TCP); A(angle related to Z), B(angle related to Y), C(angle related to Z)",
                "value": {"A": 0, "B": 0, "C": 180},
                "type": "dict[str,float]"
            },
            "start_position": {
                "description": "Start position of the robot (joint angles in [deg]); Outside of printbed; example: '{\"A1\": 75.0, \"A2\": -90.0, \"A3\": 90.0, \"A4\": 0.0, \"A5\": 90.0, \"A6\": 0.0}'",
                "value": {"A1": 75.0, "A2": -90.0, "A3": 90.0, "A4": 0.0, "A5": 90.0, "A6": 0.0},
                "type": "dict[str,float]"
            },
            "end_position": {
                "description": "End position of the robot (joint angles in [deg]);Outside of printbed; example: '{\"A1\": 75.0, \"A2\": -90.0, \"A3\": 90.0, \"A4\": 0.0, \"A5\": 90.0, \"A6\": 0.0}'",
                "value": {"A1": 75.0, "A2": -90.0, "A3": 90.0, "A4": 0.0, "A5": 90.0, "A6": 0.0},
                "type": "dict[str,float]"
            },
            "rotation_limit": {
                "description": "Limit angles of robot axis for each joint; valid rotation is between those angles",
                "value": {"A1":[-185, 185], "A2":[-130, 20],"A3": [-100, 144], "A4": [-350, 350],"A5": [-120, 120],"A6": [-350, 350]},
                "type": "dict[str,list[int]]"
            },
            "rotation_sign": {
                "description": "value defining positiv rotation direction of axis; 1 along z-axis definition, -1 against z-axis definition",
                "value": {"A1": -1, "A2": 1, "A3": 1, "A4": -1, "A5": 1, "A6": -1},
                "type": "dict[str,int]"
            },
            "rotation_offset": {
                "description": "defines rotational offset along robot rotation definition to match 'Brandst√∂tter'",
                "value": {"A1": 0,"A2": -90,"A3": 0,"A4": 0,"A5": 0,"A6": 0},
                "type": "dict[str,float]"
            },
            "base_radius": {
                "description": "Radius [mm] around A1 axis of rotation; ensures the robot head never intersects with its own base (around joint axis A1)",
                "value": 500,
                "type": "float"

            },
            "start_code": {
                "description": "Robot start code; If new categories ar defined inside this .json file, with [category_name][value], they can be referenced with {category_name} and the corresponding value wil be inserted; only names with letters and numbers seperated by '_' are valid",
                "value": [
                    "",
                    ";Printer: {id}",
                    "",
                    ";Declarations for RSI",
                    "DECL INT RET",
                    "DECL INT CONTID",
                    "",
                    ";FOLD       INI",
                    "  ;FOLD     BASISTECH INI",
                    "    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )",
                    "    INTERRUPT ON 3",
                    "    BAS (#INITMOV,0)",
                    "   ;ENDFOLD BASISTECH INI",
                    ";ENDFOLD    INI",
                    "",
                    ";FOLD    3DCP",
                    "  RET = RSI_CREATE(\"rsi3dcp\",CONTID,TRUE)",
                    "  IF (RET <> RSIOK) THEN",
                    "    HALT",
                    "  ENDIF",
                    "",
                    "  RET = RSI_ON(#ABSOLUTE)",
                    "  IF (RET <> RSIOK) THEN",
                    "    HALT",
                    "  ENDIF",
                    "",
                    " ; IF $USER_LEVEL > 19 THEN ;EXPERT Mode required",
                    " ;   MyHmiOpen(\"dn\",#Half)",
                    " ; ENDIF",
                    "",
                    "  PRINT_PROGRESS = 0",
                    "  LAYER = 1",
                    "",
                    "  $TIMER[1] = 0 ;Reset",
                    "  $TIMER_STOP[1] = FALSE ;Start",
                    "",
                    "  $TIMER[4] = 0 ;Reset",
                    "  $TIMER_STOP[4] = FALSE ;Start",
                    "",
                    "  IF $ENERGY_MEASURING.ACTIVE == TRUE THEN",
                    "    $ENERGY_MEASURING.ACTIVE = FALSE",
                    "    $ENERGY_MEASURING.ACTIVE = TRUE",
                    "  ELSE",
                    "    $ENERGY_MEASURING.ACTIVE = TRUE",
                    "  ENDIF",
                    ";ENDFOLD 3DCP",
                    "",
                    ";FOLD    BCO",
                    "  TOOL_DATA[1] = {{tool_offset}, {tool_orientation}}",
                    "  BASE_DATA[1] = {{base_coordinates}}",
                    "  $BWDSTART = FALSE",
                    "",
                    "  SWITCH $MODE_OP",
                    "    CASE #T1",
                    "      PDAT_ACT = {VEL 100,ACC 100,APO_DIST 10}",
                    "      BAS (#PTP_PARAMS,100)",
                    "    CASE #T2",
                    "      PDAT_ACT = {VEL 20,ACC 100,APO_DIST 10}",
                    "      BAS (#PTP_PARAMS,20)",
                    "    CASE #AUT",
                    "      PDAT_ACT = {VEL 20,ACC 100,APO_DIST 10}",
                    "      BAS (#PTP_PARAMS,20)",
                    "    DEFAULT",
                    "      PDAT_ACT = {VEL 20,ACC 100,APO_DIST 10}",
                    "      BAS (#PTP_PARAMS,20)",
                    "   ENDSWITCH",
                    "",
                    "   FDAT_ACT = {TOOL_NO 1,BASE_NO 1,IPO_FRAME #BASE}",
                    "",
                    "   PTP  {{start_position}}",
                    ";ENDFOLD BCO",
                    "",
                    ";FOLD    MOTION",
                    "   $VEL.CP   = {print_speed} ;m/sec",
                    "   $VEL.ORI1 = 100  ;deg/sec",
                    "   $VEL.ORI2 = 100  ;deg/sec",
                    "   $ADVANCE = 3",
                    ";ENDFOLD MOTION"
                ],
                "type": "list[str]"
            },
            "end_code": {
                "description": "Robot end code;If new categories ar defined inside this .json file, with [category_name][value], they can be referenced with {category_name}; only names with letters and numbers seperated by '_' are valid",
                "value": [
                    "PATH_TYPE = 0",
                    "PTP {{end_position}} C_PTP",
                    "",
                    "",
                    ";FOLD    3DCP",
                    "  RET = RSI_OFF()",
                    "  IF (RET <> RSIOK) THEN",
                    "    HALT",
                    "  ENDIF",
                    "",
                    "  $ENERGY_MEASURING.ACTIVE = FALSE",
                    "",
                    "  $TIMER_STOP[1] = TRUE",
                    "  $TIMER_STOP[4] = TRUE",
                    ";ENDFOLD 3DCP",
                    "",
                    "END"
                ],
                "type": "list[str]"
            },
            "bed_size": {
                "description": "Size of the robot bed in mm along X, Y, and Z axes; Sets bedsize for slicing process",
                "value": {"X": 1200, "Y": 4500, "Z": 2000},
                "type": "dict[str,float]"
            },
            "print_speed": {
                "description": "Printing speed of the robot in [m/s]",
                "value": 0.35,
                "type": "float"
            },
            "type_number":{
                "description": "sets int for each type in the Rhino section to be displayed in the src file",
                "value": {"retract": -1, "protract":-2, "travel": 0,"wall_outer": 1, "wall_inner": 2, "surface": 3, "infill": 4, "bridge": 5, "curb": 6, "support": 7, "unknown": 99},
                "type": "dict[str|int]"
            }
        },
        "Pump": {
            "description": "Gives necessary information on Pump capability and technical data",
            "retract": {
                "description": "States if pump is capable of retraction; This will include retract moves from generated G-Code",
                "value": true,
                "type": "bool"
            },
            "characteristic_curve": {
                "description": "Gives the function of RPM to Flow of the Pump in [QM,RPM]",
                "value": [[10,100],[20,220],[30,360]],
                "type": "list[list[float,float]]"
            },
            "filament_diameter": {
                "description": "diameter of filament in [mm]",
                "value": 25,
                "type": "float"
            },
            "linetype_flow": {
                "description": "Flow compensation for each linetype in [%]; 100 = flow within spec; 120 = account for under extrusion; 90 = account for over extrusion",
                "value": {"wall_outer": 100, "wall_inner": 100, "surface": 100, "infill": 100, "bridge": 100, "curb": 100, "support": 100, "unknown": 100},
                "type": "dict[str|float]"
            }
        },
        "Slicer": {
            "description": "Settings for the slicing software, including the slicer type and configuration.",
            "slicer_name": {
                "description": "The type of slicer used (CURA, ORCA, OPEN SLICER)",
                "value": "Cura",
                "type": "str"
            },
            "cura": {
                "cura_cmd_path": {
                    "description": "Path to CURA's executable file",
                    "value": "C:\\Program Files\\UltiMaker Cura 5.8.1\\CuraEngine.exe",
                    "type": "str"
                },
                "cura_config_file_path": {
                    "description": "Path to CURA's configuration file; https://github.com/Ultimaker/Cura/wiki/Definition-Files-Explained",
                    "value": "C:\\Program Files\\UltiMaker Cura 5.8.1\\share\\cura\\resources\\definitions\\test_KUKA_fdmprinter.def.json",
                    "type": "str"
                },
                "cura_arguments": {
                    "description": "Additional arguments as str for CURA slicing. These overwrite the values in the printer setup data",
                    "value": {
                        "layer_height_0": "15",
                        "layer_height": "15",
                        "infill_sparse_density": "20",
                        "roofing_layer_count": "1",
                        "mesh_position_x": "412.5",
                        "retraction_enable": "true"
                    },
                    "type": "dict[str,str]"
                },
                "cura_scaling": {
                    "description": "Sets scaling (s) and rotation (r) values for X,Y and Z axis in [%] and [deg] relativ to printbed origin",
                    "value": {"sX": 100, "sY": 400, "sZ": 100, "rX": 0, "rY": 0, "rZ": 0},
                    "type": "dict[str,float|int]"
                }
            },
            "orca": {
                "orca_cmd_path": {
                    "description": "Path to ORCA's executable file",
                    "value": "C:\\path\\to\\orca\\executable",
                    "type": "str"
                },
                "orca_config_file_path": {
                    "description": "Path to ORCA's configuration file",
                    "value": "C:\\path\\to\\orca\\config",
                    "type": "str"
                },
                "orca_arguments": {
                    "description": "Additional arguments for ORCA slicing. These overwrite the values in the printer setup data",
                    "value": [],
                    "type": "list[str]"
                },
                "orca_scaling": {
                    "description": "Sets scaling and rotation values for X,Y and Z axis in [%] and [deg] relativ to printbed origin",
                    "value": {"sX": 100, "sY": 100, "sZ": 100, "rX": 0, "rY": 0, "rZ": 0},
                    "type": "dict[str,float|int]"
                }
            },
            "open_slicer": {
                "open_slicer_cmd_path": {
                    "description": "Path to Open Slicer's executable file",
                    "value": "C:\\path\\to\\open_slicer\\executable",
                    "type": "str"
                },
                "open_slicer_config_file_path": {
                    "description": "Path to Open Slicer's configuration file",
                    "value": "C:\\path\\to\\open_slicer\\config",
                    "type": "str"
                },
                "open_slicer_arguments": {
                    "description": "Additional arguments for Open Slicer slicing. These overwrite the values in the printer setup data",
                    "value": [],
                    "type": "list[str]"
                }
            }
        },
        "Rhino": {
            "description": "Settings regarding the Rhino file",
            "point_print": {
                "description": "defines if every individual point of the Gcode gets drawn in the Rhino file; false only draws start-, end-, protract- and retract-points ",
                "value": false,
                "type": "bool"
            },
            "point_types": {
                "description": "Sets color for each point in the Rhino file",
                "start": {
                    "description":"color for start points of extrusion",
                    "value": "#008000",
                    "type": "str"
                },
                "stop":{
                    "description": "colo for start points of extrusion",
                    "value": "#ff0000",
                    "type": "str"
                },
                "retract":{
                    "description": "color for retract points ",
                    "value": "#0000CD",
                    "type": "str"
                },
                "protract":{
                    "description": "color for anti retract points",
                    "value": "#87CEEB",
                    "type": "str"
                }
            },
            "line_types": {
                "description": "Defines Line Types (ensures a clear assignment of printline-types from different slicers), including colors and appearance, for visualization in Rhino. Available line types: solid, dashed, dotted, dashdot",
                "travel": {
                    "color": {
                        "description": "Color for travel moves in hex format",
                        "value": "#808080",
                        "type": "str"
                    },
                    "linetype": {
                        "description": "Linetype in Rhino for travel moves",
                        "value": "dotted",
                        "type": "str"
                    }
                },
                "surface": {
                    "cura": ["SKIN"],
                    "orca": ["Bottom surface", "Top surface"],
                    "color": {
                        "description": "Color for surfaces in hex format",
                        "value": "#C680BB",
                        "type": "str"
                    },
                    "linetype": {
                        "description": "Linetype in Rhino for surfaces",
                        "value": "solid",
                        "type": "str"
                    }
                },
                "wall_outer": {
                    "cura": ["WALL-OUTER"],
                    "orca": ["Outer wall", "Overhang wall"],
                    "color": {
                        "description": "Color for outer walls in hex format",
                        "value": "#0065bd",
                        "type": "str"
                    },
                    "linetype": {
                        "description": "Linetype in Rhino for outer walls",
                        "value": "solid",
                        "type": "str"
                    }
                },
                "wall_inner": {
                    "cura": ["WALL-INNER"],
                    "orca": ["Inner wall"],
                    "color": {
                        "description": "Color for inner walls in hex format",
                        "value": "#9FBA36",
                        "type": "str"
                    },
                    "linetype": {
                        "description": "Linetype in Rhino for inner walls",
                        "value": "solid",
                        "type": "str"
                    }
                },
                "infill": {
                    "cura": ["FILL"],
                    "orca": ["Internal solid infill", "Spars infill"],
                    "color": {
                        "description": "Color for infill in hex format",
                        "value": "#EA7237",
                        "type": "str"
                    },
                    "linetype": {
                        "description": "Linetype in Rhino for infill",
                        "value": "solid",
                        "type": "str"
                    }
                },
                "bridge": {
                    "cura": [],
                    "orca": ["Bridge", "Internal Bridge"],
                    "color": {
                        "description": "Color for bridges in hex format",
                        "value": "#5E94D4",
                        "type": "str"
                    },
                    "linetype": {
                        "description": "Linetype in Rhino for bridges",
                        "value": "solid",
                        "type": "str"
                    }
                },
                "curb": {
                    "cura": ["SKIRT", "BRIM", "RAFT"],
                    "orca": ["Skirt", "Brim", "Raft"],
                    "color": {
                        "description": "Color for skirts, brims, and rafts in hex format",
                        "value": "#CBAB01",
                        "type": "str"
                    },
                    "linetype": {
                        "description": "Linetype in Rhino for skirts, brims, and rafts",
                        "value": "solid",
                        "type": "str"
                    }
                },
                "support": {
                    "cura": ["SUPPORT", "SUPPORT-INTERFACE"],
                    "orca": ["Support", "Support interface"],
                    "color": {
                        "description": "Color for support structures in hex format",
                        "value": "#ABB5BE",
                        "type": "str"
                    },
                    "linetype": {
                        "description": "Linetype in Rhino for support structures",
                        "value": "solid",
                        "type": "str"
                    }
                },
                "unknown": {
                    "color": {
                        "description": "Color for unknown types in hex format",
                        "value": "#000000",
                        "type": "str"
                    },
                    "linetype": {
                        "description": "Linetype in Rhino for unknown types",
                        "value": "dash_dot",
                        "type": "str"
                    }
                }
            },
            "line_widths": {
                "description": "Sets linewidth of each linetype for print view (solid, dashed, dotted, dash_dot); gets overwritten by extrusion width if line is a printline",
                "value": {"solid": 15, "dashed": 1, "dotted": 1, "dash_dot": 1},
                "type": "dict[str|float]"
            }
        }
    }
}


